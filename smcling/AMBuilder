# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os, sys, glob


projectName = 'smcling'

sourceFiles = [
  'extension.cpp',
]

project = Extension.HL2Project(builder, projectName + '.ext')

if os.path.isfile(os.path.join(builder.currentSourcePath, 'sdk', 'smsdk_ext.cpp')):
	# Use the copy included in the project
	project.sources += [os.path.join('sdk', 'smsdk_ext.cpp')]
else:
	# Use the copy included with SM 1.6 and newer
	project.sources += [os.path.join(Extension.sm_root, 'public', 'smsdk_ext.cpp')]

project.sources += sourceFiles

for sdk_name in Extension.sdks:
	sdk = Extension.sdks[sdk_name]
	binary = Extension.HL2Config(project, projectName + '.ext.' + sdk.ext, sdk)
	binary.compiler.postlink += [
		os.path.join(builder.currentSourcePath, 'lib', 'libclingMetaProcessor.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclingInterpreter.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclingUtils.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclangFrontend.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclangCodeGen.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclangSema.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclangBasic.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclangSerialization.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclangDriver.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclangEdit.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclangLex.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclangTooling.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclangAnalysis.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclangAST.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclingUtils.a'),
		os.path.join(builder.currentSourcePath, 'lib', 'libclingUtils.a'),
	]
	binary.compiler.postlink += glob.glob(builder.currentSourcePath + 'lib/' + 'libLLVM*.a')

Extension.extensions = builder.Add(project)
